{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Overview \u00b6 The purpose of this project is to provide a RESTful API around Antenna House Formatter application, which is used for converting XML tagged according to JATS to PDF document. Note Visit Introduction page for reading details. Project links \u00b6 Repository of this project (login required) Confluence page (login required) Public Docs Internal Docs (login required) Production site Development site (available within NCBI) Project layout \u00b6 The following layout is available for those who have access to the source repository of this project. bin/ # scripts for running variuos tasks/modules. etc/ # settings. docs/ # documentation of this project. src/ # source code for this project. tests/ # variuos tests executed during building process. requirements/ # dependencies of this project docs/fsm_diagrams # diagrams of finate state machines used in this project.","title":"Overview"},{"location":"index.html#overview","text":"The purpose of this project is to provide a RESTful API around Antenna House Formatter application, which is used for converting XML tagged according to JATS to PDF document. Note Visit Introduction page for reading details.","title":"Overview"},{"location":"index.html#project-links","text":"Repository of this project (login required) Confluence page (login required) Public Docs Internal Docs (login required) Production site Development site (available within NCBI)","title":"Project links"},{"location":"index.html#project-layout","text":"The following layout is available for those who have access to the source repository of this project. bin/ # scripts for running variuos tasks/modules. etc/ # settings. docs/ # documentation of this project. src/ # source code for this project. tests/ # variuos tests executed during building process. requirements/ # dependencies of this project docs/fsm_diagrams # diagrams of finate state machines used in this project.","title":"Project layout"},{"location":"0README.html","text":"Introduction \u00b6 This project provides a RESTful API for manuscript submission systems around Antenna House Formatter ( AHF ) application, which is used for converting manuscript XML (tagged according JATS ) to PDF. The system consists of 3 components, 2 of them are part of this project. First component \u00b6 It is a RESTful web service (aka jats2pdf-api ), which consumers are communicating with directly. Second component \u00b6 It is a back-office (aka jats2pdf-back-office ) which implements a business logic for life cycle of deposits and serves as a harness around the 3rd component. Third component \u00b6 It is a pdfbuild application (developed before this project was conceived) around Antenna House Formatter and it is out of the scope of this documentation. jats2pdf-api \u00b6 This service provides a RESTful API and facilitates access of outside consumers to AHF . With this API consumer should be able to submit XML manuscript along with images for figures and retrieve the result of the conversion as a PDF document. Currently, PDF document is produced with help of XSLT stylesheets developed by PMC conversion group, pdfbuild application (a wrapper around XSLT-FO and AHF ) developed by Sergey Koshelkov. This service is performing the role of a \"gatekeeper\" between the consumers, Amazon S3 storage (consumers' files are sored if necessary and the resulting PDF) and jats2pdf-back-office scripts (executed on PMC internal production servers). This service initially deployed in Bethesda data center only, later it will be extended to another data center (in Sterling) to be less prone to data center outages. The consumers of this service are manuscript submission systems at NCBI, Europe PMC and PubMed Central ingest system. Initially, this service is not protected by any form of authentication or authorization. But that functionality will be added later. Files (including the result of the conversion) should/will be uploaded to NCBI's S3 storage bucket and will have an expiration period (currently 24 hours). URLs pointing to S3 storage have an expiration period as well. It is currently set to 1 hour, in case if the consumer did not use such URLs they have to be re-requested again from this service. NCBI's S3 storage bucket objects are protected with pre-signed URLs for deposits and retrievals. Pre-signed URLs will be generated by jats2pdf-api web service at the time of the request. Note to maintainers of this service Implementation of pre-signed URLs within this service require AWS credentials (ACCESS_KEY and SECRET_KEY). jats2pdf-back-office \u00b6 A set of scripts handling the life cycle of deposits. Scripts interact with consumer data through jats2pdf-api service. The result of conversion (PDF file) is deposited to NCBI's S3 storage bucket and deposits are updated with a new status, also detailed information of error(s) are provided if such occurs.","title":"Introduction"},{"location":"0README.html#introduction","text":"This project provides a RESTful API for manuscript submission systems around Antenna House Formatter ( AHF ) application, which is used for converting manuscript XML (tagged according JATS ) to PDF. The system consists of 3 components, 2 of them are part of this project.","title":"Introduction"},{"location":"0README.html#first-component","text":"It is a RESTful web service (aka jats2pdf-api ), which consumers are communicating with directly.","title":"First component"},{"location":"0README.html#second-component","text":"It is a back-office (aka jats2pdf-back-office ) which implements a business logic for life cycle of deposits and serves as a harness around the 3rd component.","title":"Second component"},{"location":"0README.html#third-component","text":"It is a pdfbuild application (developed before this project was conceived) around Antenna House Formatter and it is out of the scope of this documentation.","title":"Third component"},{"location":"0README.html#jats2pdf-api","text":"This service provides a RESTful API and facilitates access of outside consumers to AHF . With this API consumer should be able to submit XML manuscript along with images for figures and retrieve the result of the conversion as a PDF document. Currently, PDF document is produced with help of XSLT stylesheets developed by PMC conversion group, pdfbuild application (a wrapper around XSLT-FO and AHF ) developed by Sergey Koshelkov. This service is performing the role of a \"gatekeeper\" between the consumers, Amazon S3 storage (consumers' files are sored if necessary and the resulting PDF) and jats2pdf-back-office scripts (executed on PMC internal production servers). This service initially deployed in Bethesda data center only, later it will be extended to another data center (in Sterling) to be less prone to data center outages. The consumers of this service are manuscript submission systems at NCBI, Europe PMC and PubMed Central ingest system. Initially, this service is not protected by any form of authentication or authorization. But that functionality will be added later. Files (including the result of the conversion) should/will be uploaded to NCBI's S3 storage bucket and will have an expiration period (currently 24 hours). URLs pointing to S3 storage have an expiration period as well. It is currently set to 1 hour, in case if the consumer did not use such URLs they have to be re-requested again from this service. NCBI's S3 storage bucket objects are protected with pre-signed URLs for deposits and retrievals. Pre-signed URLs will be generated by jats2pdf-api web service at the time of the request. Note to maintainers of this service Implementation of pre-signed URLs within this service require AWS credentials (ACCESS_KEY and SECRET_KEY).","title":"jats2pdf-api"},{"location":"0README.html#jats2pdf-back-office","text":"A set of scripts handling the life cycle of deposits. Scripts interact with consumer data through jats2pdf-api service. The result of conversion (PDF file) is deposited to NCBI's S3 storage bucket and deposits are updated with a new status, also detailed information of error(s) are provided if such occurs.","title":"jats2pdf-back-office"},{"location":"1README-API.html","text":"API \u00b6 Prerequisites \u00b6 For each article, the service requires: An article XML file that is well-formed and valid according to the NLM Journal Publishing or Archiving DTD version 2.3 or 3.0 or to the NISO JATSJournal Publishing or Archiving DTD version 1.0 or 1.1. Images referenced in the article XML file must be supplied in TIFF format with \".tif\" extension (although the image references in the graphic/@xlink:href might not include the file extension). Also, the PMC known domain name may be supplied for output styling/branding. If a domain name is not supplied within an XML, a general HHS style will be used. If you need the output to be styled differently from what currently supported, please make an inquiry. A domain the article belongs to. (Branding and rendering could be specific for each domain.). If the domain of your interest is not supported yet, then contact PMC group. Depositor name. Note Currently, the implementation supports branding/styling based on XML PIs: <article> <?domain ...?> </article> or <article> <?origin ...?> </article> If they both are missing the generic HHS branding will be applied. In the future the domain supplied with your request to create a deposit will take precedece over above PIs. Note PMC conversion group needs to investigate if images other than the tiffs are currently expected in XSL code. Introduction \u00b6 The production API endpoint is available at https://api.ncbi.nlm.nih.gov/lit/jats2pdf/api/ . Also, there is a starting/home page of the service available at https://dev.ncbi.nlm.nih.gov/lit/jats2pdf/ . Other links: API Swagger page API Swagger OpenApi specs API Redoc page Admin page . Check the version of application The following entities of the API are available for consumers: depositors -> /api/depositors/ domains -> /api/domains/ deposits -> /api/deposits/ items -> /api/deposits/{ deposit_pk }/items/ Attention This service currently supports interactive requests with the browser of your choice and with your custom application, which sends and accepts data in JSON format. Tip It is highly suggested to read a useful details on HTTP verbs and on HTTP response codes suitable for this API. Definitions \u00b6 Detail depositor - the consumer of this web service (later, a login from credentials will be used instead), currently used for self-identification. domain - the name to be used in the future for manuscript branding and processes applied by the jats2pdf-back-office scripts. Currently, the PI <?domain ...?> or <?origin ...?> from XML itself is used for that. But you have to provide this property in your requests for future compatibility. deposit - set of files (aka items ) to be used in conversion. All files in deposit must have unique names. Only one manuscript XML file must be present. All other files expected are images for figures, tables (if no native tables available), equations if applicable. The deposit could be provided as a single or multiple archive file(s) (in .zip, .tar, .tar.gz or .tgz formats) which includes an XML file with all image files it depends on Or as uncompressed/unarchived individual files. Each file of the deposit is called an item , see definition of item below. item - is an entity of this service which represents a file (name) or URL behind a file. All items together constitute a deposit to be used in the conversion process to PDF document. deposit_pk - the service generated identifier of a deposit (also called as deposit_id ). item_pk - the service generated identifier of an item (also called as item_id ). Caution When an item is a file, it has to be uploaded to NCBI's S3 storage bucket by consumer separately. When an item is an URL starting with \"http://\" or \"https://\" sub-strings then the jats2pdf-back-office component must be able to access files behind the URLs from storage of consumer's choice. Note Files compressed with various utilities (producing .tar, .bz2, .tar.bz2, .tgz, .zip, .7z, .tar.Z, .rar formats) are not supported yet . API Interactions \u00b6 Tip If you want to receive and send your data in json format use the following headers: Content-Type: application/json and Accept: application/json in your HTTP requests. Tip You can also point your browser to all endpoints of this service. Warning Not all forms work properly, unfortunately. The following steps (in plain words) could be considered as a typical scenario to interact with a service. Detail Create a deposit . Upload items to NCBI's S3 storage bucket if you can not provide URL of your files. Commit a deposit . Monitor a deposit state Fetch a result if generated. The service supports many other actions, but they are not considered typical for the consumers. Attention Error handling on the client side expected to correspond to HTTP response codes . The content you may see in HTTP body in JSON or other formats may be useful during development of your client. Possibly the details property from the response body could be useful if delivered. It could be sometime cryptic for end-user to interpret the source of the problem. Deposit \u00b6 Create POST /api/deposits Note To create a deposit you need to send a POST request to /api/deposits/ endpoint. Based on your desire and ability to provide your files inform of URLs or files, you may proceed to one of the following sections URL items , File items , Mixed items or even with No items (do not worry you can supply items later in subsequent requests). Deposit Model \u00b6 { action: string, items: [ $item, $item, ... ], details: string, *depositor*: string, *domain*: string, #deposit_id#: string, #created#: iso-8601-time-date-string, #updated#: iso-8601-time-date-string, #state#: string, } Important Properties in the model above, enclosed into * (asterisks) are mandatory, enclosed into # are read-only and should be in your requests. Note See details of an $item in your requests below. Details action - a property to indicate the desirable action applied to the deposit deposit_id - a deposit unique identifier. depositor - see explanations in Definitions section. domain - see explanations in Definitions section. state - a machine-readable deposit state, see diagram . created - time of creation of the deposit. updated - time of the last update of the deposit. items - an array of deposit items, see explanations of item in Definitions section. Deposit Actions \u00b6 Tip the following actions could be used as values of action property in deposit model or could be used with PUT requests to the endpoints /api/deposits/{deposit_pk}/{action}/ Details commit - commit a deposit for processing. retry - reprocess a deposit if possible. started - mark a deposit to be waiting for result. no_result - mark a deposit as failed one with no result. succeeded - mark a deposit as successful. expire - mark a deposit as expired. Note Action value commit would make sense at the time of the new deposit creation for URL items. Not all actions are possible at a given state, see Deposit states diagram below to understand the possible transitions. URL items \u00b6 You can use the following model for your requests. See an example of such request on a separate page. { action: string, items: [ $item, $item, ... ], *depositor*: string, *domain*: string, } Tip When you supply your deposit to the service with URL(s) it is recommended to prepare and make available your file(s) ahead of time, that you can use action property with value \"commit\" to initiate processing of your deposit at the time of your request when you create a deposit. File Items \u00b6 You can use the following model for your requests. See an example of such request on a separate page. { items: [ $item, $item, ... ], *depositor*: string, *domain*: string } Tip When you supply your deposit to the service with File(s) in response you will get s3_put_url property for each item, which you have to use within 1 hour to upload your files to NCBI's S3 storage bucket with HTTP PUT requests. Here is an example of using curl: curl \"${s3_put_url}\" --upload-file an_article.xml , curl \"${s3_put_url}\" --upload-file an_image1.tif , ...; Hint Just in case if s3_put_url would expire, just go to /api/deposits/{deposit_pl}/items/{item_pk}/ and grab a new one. Or you can get all items from /api/deposits/{deposit_pk}/ at once. Important After you uploaded all your files to NCBI's S3 storage bucket you have to commit your deposit for processing by sending an HTTP PUT request to /api/deposits/{deposit_pk}/commit/ endpoint. Hint To speedup the processing of your deposit you can send HTTP 'PUT' request at the following endpoint /api/deposits/{deposit_pk}/items/{item_pk}/uploaded after each successfully uploaded file to NCBI's S3 storage bucket. Mixed items \u00b6 This case should not be typical, but it still can be used. You can basically follow the File Items model above with exception to items supplied as URL for those see URL Items . { items: [ $item, $item, ... ], *depositor*: string, *domain*: string } Important After you uploaded all your files to NCBI's S3 storage bucket you have to commit your deposit for processing by sending an HTTP PUT request to /api/deposits/{deposit_pk}/commit/ endpoint. No items \u00b6 Warning This model of depositing your article for conversion is also possible, but it would take more requests/response cycles. { *depositor*: string, *domain*: string } After a deposit was successfully created you have to create your item(s), follow the section Item creation Deposit commit \u00b6 If your items are all URLs the action property could be used with value commit at the time of deposit creation (see above) to save you an extra request not to be made. But otherwise, you can commit your deposit to conversion (when all items are made available). Tip PUT /api/deposits/{deposit_pk}/commit/ Note Here is an example of committing a deposit for conversion. commit-a-deposit Deposit state monitoring \u00b6 Tip GET /api/deposits/{deposit_pk}/ After successful creation of a deposit (a deposit_id was acquired, items are uploaded where needed, and started the conversion with commit action) you can start monitoring your deposit for result or error(s). Hint See details of Deposit model . The main target of your interest is a state property in the deposit . State NO_RESULT \u00b6 If you see the state of a deposit with value NO_RESULT you should check the value of the property details . Where you can find an error encountered at the time of conversion. In case if the error is not clear, contact PMC group. In some cases, the error could be a temporary glitch, in such case you can retry the conversion with retry action. Tip PUT /api/deposits/{deposit_pk}/retry/ State RESULT_IS_READY \u00b6 When you see the value of the state as RESULT_IS_READY , the next step is to search for an item where property result == true . When you found it you should grab the value of the property s3_get_url of that item and use it to download your PDF. That URL has an expiration time of 3600 seconds, if for some reason you did not succeed in that period, just re-fetch the deposit deposit_pk again and use the new value of s3_get_url property. State EXPIRED \u00b6 If you see the state of a deposit with value EXPIRED than there is nothing you can do with this deposit, even if a result was created at some point. Objects stored in the S3 bucket have an expiration time, therefore the deposits have it too. But you can create a new deposit if necessary. State WAITING_FOR_UPLOAD \u00b6 This state is usually assigned for newly created deposit with FILE items. It is assigned when you reopen the deposit to add new items if needed. And finally, it could be assigned by jats2pdf-back-office component when a deposit was committed but for some reason not all FILE items are available. In this case check details property value for possible Exception at the time of checking. Deposit states diagram \u00b6 The state of the deposit is available in state property of each deposit. You can check all the supported states in the following deposit states diagram (in svg format): and applicable actions to each state as the following endpoint /api/deposits/{deposit_pk}/{action}/ , which could be applied with HTTP PUT request. Deposit is ready \u00b6 When the state of the deposit would become RESULT_IS_READY you can look into the items property and iterate over to find the one with property result and value true . There must be a s3_get_url property, which you can use to download your PDF file from NCBI's S3 storage bucket (using HTTP GET method). Conversion failed \u00b6 When the state property value of the deposit would become NO_RESULT you may find the details of that state in details property. Item \u00b6 Create POST /api/deposits/{deposit_pk}/items/ To create an item you should create a deposit first and acquire a deposit_id . After that you can create your item(s) by sending POST HTTP request (as many as the number of items) to the following endpoint /api/deposita/{deposit_pk}/items to create each item . Item model \u00b6 { result: boolean, *item*: string, *item_size*: integer, *depositor*: string, #created#: iso-8601-time-date-string, #updated#: iso-8601-time-date-string, #s3_head_url#: string, #s3_get_url#: string, #s3_put_url#: string, #item_type#: string, #item_id#: string, #state#: string, } Important Properties in the model above, enclosed into * (asterisks) are mandatory, enclosed into # are read-only and should be in your requests. Detail result - a boolean property, which indicates, that the item is the result of a conversion. item - a string which represents/holds a file name or URL of deposit . item_size - a size of the item/file in bytes. Current limits are 10Mibs for regular items and 50Mib for result items. depositor - an abbreviation of the depositor. created - the time of creation of the item. updated - time of the last update of the item. s3_put_url - property is applicable when depositor intention was to deposit file to Amazon S3 storage controlled by NCBI. The value of this property (URL) will be regenerated with a new expiration time, every time, when depositor access a deposit with \"deposit_pk\" or item with \"item_pk\". It will not be present if the depositor provided a retrievable URL. s3_put_url value is suitable to be used with method PUT when the file suppose to be uploaded to Amazon S3 storage. s3_get_url - populated with retrievable URL if it was provided by the depositor or with signed URL if depositor uploaded a file to Amazon S3 storage. This URL is suitable to be used with method GET when the file is uploaded to Amazon S3 storage ( s3_get_url is needed for jats2pdf-back-office back-end service). s3_head_url - populated with URL of a item/file uploaded to Amazon S3 storage. This URL is suitable to be used with method HEAD when the file is uploaded to Amazon S3 storage ( s3_get_url is needed for jats2pdf-back-office back-end service). item_type - FILE or URL item_id - an item unique identifier. state - - state - a machine-readable item state, see diagram . Item states diagram \u00b6 The state of the deposit is available in state property of each deposit. You can check all the supported states in the following deposit states diagram (in svg format): and applicable actions to each state as the following endpoint /api/deposits/{deposit_pk}/items/{item_pk}/{action}/ , which could be applied with HTTP PUT request. Auto-generated diagram \u00b6 Auto-generated states diagram (in svg format):","title":"API"},{"location":"1README-API.html#api","text":"","title":"API"},{"location":"1README-API.html#prerequisites","text":"For each article, the service requires: An article XML file that is well-formed and valid according to the NLM Journal Publishing or Archiving DTD version 2.3 or 3.0 or to the NISO JATSJournal Publishing or Archiving DTD version 1.0 or 1.1. Images referenced in the article XML file must be supplied in TIFF format with \".tif\" extension (although the image references in the graphic/@xlink:href might not include the file extension). Also, the PMC known domain name may be supplied for output styling/branding. If a domain name is not supplied within an XML, a general HHS style will be used. If you need the output to be styled differently from what currently supported, please make an inquiry. A domain the article belongs to. (Branding and rendering could be specific for each domain.). If the domain of your interest is not supported yet, then contact PMC group. Depositor name. Note Currently, the implementation supports branding/styling based on XML PIs: <article> <?domain ...?> </article> or <article> <?origin ...?> </article> If they both are missing the generic HHS branding will be applied. In the future the domain supplied with your request to create a deposit will take precedece over above PIs. Note PMC conversion group needs to investigate if images other than the tiffs are currently expected in XSL code.","title":"Prerequisites"},{"location":"1README-API.html#introduction","text":"The production API endpoint is available at https://api.ncbi.nlm.nih.gov/lit/jats2pdf/api/ . Also, there is a starting/home page of the service available at https://dev.ncbi.nlm.nih.gov/lit/jats2pdf/ . Other links: API Swagger page API Swagger OpenApi specs API Redoc page Admin page . Check the version of application The following entities of the API are available for consumers: depositors -> /api/depositors/ domains -> /api/domains/ deposits -> /api/deposits/ items -> /api/deposits/{ deposit_pk }/items/ Attention This service currently supports interactive requests with the browser of your choice and with your custom application, which sends and accepts data in JSON format. Tip It is highly suggested to read a useful details on HTTP verbs and on HTTP response codes suitable for this API.","title":"Introduction"},{"location":"1README-API.html#definitions","text":"Detail depositor - the consumer of this web service (later, a login from credentials will be used instead), currently used for self-identification. domain - the name to be used in the future for manuscript branding and processes applied by the jats2pdf-back-office scripts. Currently, the PI <?domain ...?> or <?origin ...?> from XML itself is used for that. But you have to provide this property in your requests for future compatibility. deposit - set of files (aka items ) to be used in conversion. All files in deposit must have unique names. Only one manuscript XML file must be present. All other files expected are images for figures, tables (if no native tables available), equations if applicable. The deposit could be provided as a single or multiple archive file(s) (in .zip, .tar, .tar.gz or .tgz formats) which includes an XML file with all image files it depends on Or as uncompressed/unarchived individual files. Each file of the deposit is called an item , see definition of item below. item - is an entity of this service which represents a file (name) or URL behind a file. All items together constitute a deposit to be used in the conversion process to PDF document. deposit_pk - the service generated identifier of a deposit (also called as deposit_id ). item_pk - the service generated identifier of an item (also called as item_id ). Caution When an item is a file, it has to be uploaded to NCBI's S3 storage bucket by consumer separately. When an item is an URL starting with \"http://\" or \"https://\" sub-strings then the jats2pdf-back-office component must be able to access files behind the URLs from storage of consumer's choice. Note Files compressed with various utilities (producing .tar, .bz2, .tar.bz2, .tgz, .zip, .7z, .tar.Z, .rar formats) are not supported yet .","title":"Definitions"},{"location":"1README-API.html#api-interactions","text":"Tip If you want to receive and send your data in json format use the following headers: Content-Type: application/json and Accept: application/json in your HTTP requests. Tip You can also point your browser to all endpoints of this service. Warning Not all forms work properly, unfortunately. The following steps (in plain words) could be considered as a typical scenario to interact with a service. Detail Create a deposit . Upload items to NCBI's S3 storage bucket if you can not provide URL of your files. Commit a deposit . Monitor a deposit state Fetch a result if generated. The service supports many other actions, but they are not considered typical for the consumers. Attention Error handling on the client side expected to correspond to HTTP response codes . The content you may see in HTTP body in JSON or other formats may be useful during development of your client. Possibly the details property from the response body could be useful if delivered. It could be sometime cryptic for end-user to interpret the source of the problem.","title":"API Interactions"},{"location":"1README-API.html#deposit","text":"Create POST /api/deposits Note To create a deposit you need to send a POST request to /api/deposits/ endpoint. Based on your desire and ability to provide your files inform of URLs or files, you may proceed to one of the following sections URL items , File items , Mixed items or even with No items (do not worry you can supply items later in subsequent requests).","title":"Deposit"},{"location":"1README-API.html#deposit-model","text":"{ action: string, items: [ $item, $item, ... ], details: string, *depositor*: string, *domain*: string, #deposit_id#: string, #created#: iso-8601-time-date-string, #updated#: iso-8601-time-date-string, #state#: string, } Important Properties in the model above, enclosed into * (asterisks) are mandatory, enclosed into # are read-only and should be in your requests. Note See details of an $item in your requests below. Details action - a property to indicate the desirable action applied to the deposit deposit_id - a deposit unique identifier. depositor - see explanations in Definitions section. domain - see explanations in Definitions section. state - a machine-readable deposit state, see diagram . created - time of creation of the deposit. updated - time of the last update of the deposit. items - an array of deposit items, see explanations of item in Definitions section.","title":"Deposit Model"},{"location":"1README-API.html#deposit-actions","text":"Tip the following actions could be used as values of action property in deposit model or could be used with PUT requests to the endpoints /api/deposits/{deposit_pk}/{action}/ Details commit - commit a deposit for processing. retry - reprocess a deposit if possible. started - mark a deposit to be waiting for result. no_result - mark a deposit as failed one with no result. succeeded - mark a deposit as successful. expire - mark a deposit as expired. Note Action value commit would make sense at the time of the new deposit creation for URL items. Not all actions are possible at a given state, see Deposit states diagram below to understand the possible transitions.","title":"Deposit Actions"},{"location":"1README-API.html#url-items","text":"You can use the following model for your requests. See an example of such request on a separate page. { action: string, items: [ $item, $item, ... ], *depositor*: string, *domain*: string, } Tip When you supply your deposit to the service with URL(s) it is recommended to prepare and make available your file(s) ahead of time, that you can use action property with value \"commit\" to initiate processing of your deposit at the time of your request when you create a deposit.","title":"URL items"},{"location":"1README-API.html#file-items","text":"You can use the following model for your requests. See an example of such request on a separate page. { items: [ $item, $item, ... ], *depositor*: string, *domain*: string } Tip When you supply your deposit to the service with File(s) in response you will get s3_put_url property for each item, which you have to use within 1 hour to upload your files to NCBI's S3 storage bucket with HTTP PUT requests. Here is an example of using curl: curl \"${s3_put_url}\" --upload-file an_article.xml , curl \"${s3_put_url}\" --upload-file an_image1.tif , ...; Hint Just in case if s3_put_url would expire, just go to /api/deposits/{deposit_pl}/items/{item_pk}/ and grab a new one. Or you can get all items from /api/deposits/{deposit_pk}/ at once. Important After you uploaded all your files to NCBI's S3 storage bucket you have to commit your deposit for processing by sending an HTTP PUT request to /api/deposits/{deposit_pk}/commit/ endpoint. Hint To speedup the processing of your deposit you can send HTTP 'PUT' request at the following endpoint /api/deposits/{deposit_pk}/items/{item_pk}/uploaded after each successfully uploaded file to NCBI's S3 storage bucket.","title":"File Items"},{"location":"1README-API.html#mixed-items","text":"This case should not be typical, but it still can be used. You can basically follow the File Items model above with exception to items supplied as URL for those see URL Items . { items: [ $item, $item, ... ], *depositor*: string, *domain*: string } Important After you uploaded all your files to NCBI's S3 storage bucket you have to commit your deposit for processing by sending an HTTP PUT request to /api/deposits/{deposit_pk}/commit/ endpoint.","title":"Mixed items"},{"location":"1README-API.html#no-items","text":"Warning This model of depositing your article for conversion is also possible, but it would take more requests/response cycles. { *depositor*: string, *domain*: string } After a deposit was successfully created you have to create your item(s), follow the section Item creation","title":"No items"},{"location":"1README-API.html#deposit-commit","text":"If your items are all URLs the action property could be used with value commit at the time of deposit creation (see above) to save you an extra request not to be made. But otherwise, you can commit your deposit to conversion (when all items are made available). Tip PUT /api/deposits/{deposit_pk}/commit/ Note Here is an example of committing a deposit for conversion. commit-a-deposit","title":"Deposit commit"},{"location":"1README-API.html#deposit-state-monitoring","text":"Tip GET /api/deposits/{deposit_pk}/ After successful creation of a deposit (a deposit_id was acquired, items are uploaded where needed, and started the conversion with commit action) you can start monitoring your deposit for result or error(s). Hint See details of Deposit model . The main target of your interest is a state property in the deposit .","title":"Deposit state monitoring"},{"location":"1README-API.html#state-no_result","text":"If you see the state of a deposit with value NO_RESULT you should check the value of the property details . Where you can find an error encountered at the time of conversion. In case if the error is not clear, contact PMC group. In some cases, the error could be a temporary glitch, in such case you can retry the conversion with retry action. Tip PUT /api/deposits/{deposit_pk}/retry/","title":"State NO_RESULT"},{"location":"1README-API.html#state-result_is_ready","text":"When you see the value of the state as RESULT_IS_READY , the next step is to search for an item where property result == true . When you found it you should grab the value of the property s3_get_url of that item and use it to download your PDF. That URL has an expiration time of 3600 seconds, if for some reason you did not succeed in that period, just re-fetch the deposit deposit_pk again and use the new value of s3_get_url property.","title":"State RESULT_IS_READY"},{"location":"1README-API.html#state-expired","text":"If you see the state of a deposit with value EXPIRED than there is nothing you can do with this deposit, even if a result was created at some point. Objects stored in the S3 bucket have an expiration time, therefore the deposits have it too. But you can create a new deposit if necessary.","title":"State EXPIRED"},{"location":"1README-API.html#state-waiting_for_upload","text":"This state is usually assigned for newly created deposit with FILE items. It is assigned when you reopen the deposit to add new items if needed. And finally, it could be assigned by jats2pdf-back-office component when a deposit was committed but for some reason not all FILE items are available. In this case check details property value for possible Exception at the time of checking.","title":"State WAITING_FOR_UPLOAD"},{"location":"1README-API.html#deposit-states-diagram","text":"The state of the deposit is available in state property of each deposit. You can check all the supported states in the following deposit states diagram (in svg format): and applicable actions to each state as the following endpoint /api/deposits/{deposit_pk}/{action}/ , which could be applied with HTTP PUT request.","title":"Deposit states diagram"},{"location":"1README-API.html#deposit-is-ready","text":"When the state of the deposit would become RESULT_IS_READY you can look into the items property and iterate over to find the one with property result and value true . There must be a s3_get_url property, which you can use to download your PDF file from NCBI's S3 storage bucket (using HTTP GET method).","title":"Deposit is ready"},{"location":"1README-API.html#conversion-failed","text":"When the state property value of the deposit would become NO_RESULT you may find the details of that state in details property.","title":"Conversion failed"},{"location":"1README-API.html#item","text":"Create POST /api/deposits/{deposit_pk}/items/ To create an item you should create a deposit first and acquire a deposit_id . After that you can create your item(s) by sending POST HTTP request (as many as the number of items) to the following endpoint /api/deposita/{deposit_pk}/items to create each item .","title":"Item"},{"location":"1README-API.html#item-model","text":"{ result: boolean, *item*: string, *item_size*: integer, *depositor*: string, #created#: iso-8601-time-date-string, #updated#: iso-8601-time-date-string, #s3_head_url#: string, #s3_get_url#: string, #s3_put_url#: string, #item_type#: string, #item_id#: string, #state#: string, } Important Properties in the model above, enclosed into * (asterisks) are mandatory, enclosed into # are read-only and should be in your requests. Detail result - a boolean property, which indicates, that the item is the result of a conversion. item - a string which represents/holds a file name or URL of deposit . item_size - a size of the item/file in bytes. Current limits are 10Mibs for regular items and 50Mib for result items. depositor - an abbreviation of the depositor. created - the time of creation of the item. updated - time of the last update of the item. s3_put_url - property is applicable when depositor intention was to deposit file to Amazon S3 storage controlled by NCBI. The value of this property (URL) will be regenerated with a new expiration time, every time, when depositor access a deposit with \"deposit_pk\" or item with \"item_pk\". It will not be present if the depositor provided a retrievable URL. s3_put_url value is suitable to be used with method PUT when the file suppose to be uploaded to Amazon S3 storage. s3_get_url - populated with retrievable URL if it was provided by the depositor or with signed URL if depositor uploaded a file to Amazon S3 storage. This URL is suitable to be used with method GET when the file is uploaded to Amazon S3 storage ( s3_get_url is needed for jats2pdf-back-office back-end service). s3_head_url - populated with URL of a item/file uploaded to Amazon S3 storage. This URL is suitable to be used with method HEAD when the file is uploaded to Amazon S3 storage ( s3_get_url is needed for jats2pdf-back-office back-end service). item_type - FILE or URL item_id - an item unique identifier. state - - state - a machine-readable item state, see diagram .","title":"Item model"},{"location":"1README-API.html#item-states-diagram","text":"The state of the deposit is available in state property of each deposit. You can check all the supported states in the following deposit states diagram (in svg format): and applicable actions to each state as the following endpoint /api/deposits/{deposit_pk}/items/{item_pk}/{action}/ , which could be applied with HTTP PUT request.","title":"Item states diagram"},{"location":"1README-API.html#auto-generated-diagram","text":"Auto-generated states diagram (in svg format):","title":"Auto-generated diagram"},{"location":"2README-API-USE-EXAMPLES.html","text":"Use examples \u00b6 Attention Some details of JSON documents are redacted for brevity. Deposit file items \u00b6 Request POST /api/deposits/ HTTP / 1.1 Host : localhost Content-Type : application/json Accept : application/json { \"depositor\" : \"test\" , \"domain\" : \"test\" , \"items\" : [ { \"item\" : \"nihms973641_nihpa.nxml\" , \"item_size\" : 196676 }, { \"item\" : \"nihms973641f1.tif\" , \"item_size\" : 105600 }, { \"item\" : \"nihms973641f2.tif\" , \"item_size\" : 167016 }, { \"item\" : \"nihms973641f3.tif\" , \"item_size\" : 192036 }, { \"item\" : \"nihms973641f4.tif\" , \"item_size\" : 122032 } ] } Response HTTP / 1.1 201 Created Date : Mon, 17 Sep 2018 20:31:30 GMT Allow : GET, POST, HEAD, OPTIONS Content-Length : 5381 Content-Type : application/json { \"deposit_id\" : \"ea02454e-01eb-496a-a596-680f8a62406a\" , \"items\" : [ { \"s3_head_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"s3_put_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"item_id\" : \"7034bc8a-92e6-4266-9ba4-2aeae85a5fdf\" , \"depositor\" : \"test\" , \"item\" : \"nihms973641_nihpa.nxml\" , \"item_type\" : \"FILE\" , \"state\" : \"WAITING_FOR_UPLOAD\" , \"created\" : \"2018-09-17T16:31:30.373798-04:00\" , \"updated\" : \"2018-09-17T16:31:30.373840-04:00\" , \"result\" : false , \"item_size\" : 196676 }, { \"s3_head_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641f1.tif?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"s3_put_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641f1.tif?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"item_id\" : \"d54df37c-4a43-41ca-9767-ae88d2094310\" , \"depositor\" : \"test\" , \"item\" : \"nihms973641f1.tif\" , \"item_type\" : \"FILE\" , \"state\" : \"WAITING_FOR_UPLOAD\" , \"created\" : \"2018-09-17T16:31:30.382705-04:00\" , \"updated\" : \"2018-09-17T16:31:30.382746-04:00\" , \"result\" : false , \"item_size\" : 105600 }, {}, {}, {} ], \"state\" : \"WAITING_FOR_ITEMS\" , \"created\" : \"2018-09-17T16:31:30.361948-04:00\" , \"updated\" : \"2018-09-17T16:31:30.362041-04:00\" , \"depositor\" : \"test\" , \"domain\" : \"test\" } Commit a deposit \u00b6 Request PUT /api/deposits/ea02454e-01eb-496a-a596-680f8a62406a/commit/ HTTP / 1.1 Host : localhost Content-Type : application/json Accept : application/json Content-Length : 0 Response HTTP / 1.0 200 OK Date : Mon, 17 Sep 2018 20:43:23 GMT Content-Type : application/json Allow : PUT, OPTIONS Content-Length : 5373 { \"deposit_id\" : \"ea02454e-01eb-496a-a596-680f8a62406a\" , \"items\" : [ { \"s3_head_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"s3_put_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"item_id\" : \"7034bc8a-92e6-4266-9ba4-2aeae85a5fdf\" , \"depositor\" : \"test\" , \"item\" : \"nihms973641_nihpa.nxml\" , \"item_type\" : \"FILE\" , \"state\" : \"WAITING_FOR_UPLOAD\" , \"created\" : \"2018-09-17T16:31:30.373798-04:00\" , \"updated\" : \"2018-09-17T16:31:30.373840-04:00\" , \"result\" : false , \"item_size\" : 196676 }, {}, {}, {}, {} ], \"state\" : \"COMMITTED\" , \"created\" : \"2018-09-17T16:31:30.361948-04:00\" , \"updated\" : \"2018-09-17T16:43:23.724580-04:00\" , \"depositor\" : \"test\" , \"domain\" : \"test\" } Deposit URL items \u00b6 Request POST /api/deposits/ HTTP / 1.1 Host : localhost Content-Type : application/json Accept : application/json { \"action\" : \"commit\" , \"depositor\" : \"test\" , \"domain\" : \"test\" , \"items\" : [ { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641_nihpa.nxml\" , \"item_size\" : 196676 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f1.tif\" , \"item_size\" : 105600 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f2.tif\" , \"item_size\" : 167016 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f3.tif\" , \"item_size\" : 192036 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f4.tif\" , \"item_size\" : 122032 } ] } Response HTTP / 1.0 201 Created Date : Mon, 17 Sep 2018 20:39:48 GMT Content-Type : application/json Allow : GET, POST, HEAD, OPTIONS Content-Length : 1863 { \"deposit_id\" : \"0c6c7906-35f3-4f8a-9842-fa2991a1c74b\" , \"items\" : [ { \"item_id\" : \"cf2aea2f-6865-4992-9775-2b2011f25f24\" , \"depositor\" : \"test\" , \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641_nihpa.nxml\" , \"item_type\" : \"URL\" , \"state\" : \"READY_FOR_PROCESSING\" , \"created\" : \"2018-09-17T16:39:48.761646-04:00\" , \"updated\" : \"2018-09-17T16:39:48.768045-04:00\" , \"result\" : false , \"item_size\" : 196676 }, { \"item_id\" : \"f00fdd7b-13e4-4a1a-818f-fee0b9aabe0c\" , \"depositor\" : \"test\" , \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f1.tif\" , \"item_type\" : \"URL\" , \"state\" : \"READY_FOR_PROCESSING\" , \"created\" : \"2018-09-17T16:39:48.789584-04:00\" , \"updated\" : \"2018-09-17T16:39:48.796452-04:00\" , \"result\" : false , \"item_size\" : 105600 }, {}, {}, {} ], \"state\" : \"COMMITTED\" , \"created\" : \"2018-09-17T16:39:48.754281-04:00\" , \"updated\" : \"2018-09-17T16:39:48.855323-04:00\" , \"depositor\" : \"test\" , \"domain\" : \"test\" }","title":"Use examples"},{"location":"2README-API-USE-EXAMPLES.html#use-examples","text":"Attention Some details of JSON documents are redacted for brevity.","title":"Use examples"},{"location":"2README-API-USE-EXAMPLES.html#deposit-file-items","text":"Request POST /api/deposits/ HTTP / 1.1 Host : localhost Content-Type : application/json Accept : application/json { \"depositor\" : \"test\" , \"domain\" : \"test\" , \"items\" : [ { \"item\" : \"nihms973641_nihpa.nxml\" , \"item_size\" : 196676 }, { \"item\" : \"nihms973641f1.tif\" , \"item_size\" : 105600 }, { \"item\" : \"nihms973641f2.tif\" , \"item_size\" : 167016 }, { \"item\" : \"nihms973641f3.tif\" , \"item_size\" : 192036 }, { \"item\" : \"nihms973641f4.tif\" , \"item_size\" : 122032 } ] } Response HTTP / 1.1 201 Created Date : Mon, 17 Sep 2018 20:31:30 GMT Allow : GET, POST, HEAD, OPTIONS Content-Length : 5381 Content-Type : application/json { \"deposit_id\" : \"ea02454e-01eb-496a-a596-680f8a62406a\" , \"items\" : [ { \"s3_head_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"s3_put_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"item_id\" : \"7034bc8a-92e6-4266-9ba4-2aeae85a5fdf\" , \"depositor\" : \"test\" , \"item\" : \"nihms973641_nihpa.nxml\" , \"item_type\" : \"FILE\" , \"state\" : \"WAITING_FOR_UPLOAD\" , \"created\" : \"2018-09-17T16:31:30.373798-04:00\" , \"updated\" : \"2018-09-17T16:31:30.373840-04:00\" , \"result\" : false , \"item_size\" : 196676 }, { \"s3_head_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641f1.tif?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"s3_put_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641f1.tif?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"item_id\" : \"d54df37c-4a43-41ca-9767-ae88d2094310\" , \"depositor\" : \"test\" , \"item\" : \"nihms973641f1.tif\" , \"item_type\" : \"FILE\" , \"state\" : \"WAITING_FOR_UPLOAD\" , \"created\" : \"2018-09-17T16:31:30.382705-04:00\" , \"updated\" : \"2018-09-17T16:31:30.382746-04:00\" , \"result\" : false , \"item_size\" : 105600 }, {}, {}, {} ], \"state\" : \"WAITING_FOR_ITEMS\" , \"created\" : \"2018-09-17T16:31:30.361948-04:00\" , \"updated\" : \"2018-09-17T16:31:30.362041-04:00\" , \"depositor\" : \"test\" , \"domain\" : \"test\" }","title":"Deposit file items"},{"location":"2README-API-USE-EXAMPLES.html#commit-a-deposit","text":"Request PUT /api/deposits/ea02454e-01eb-496a-a596-680f8a62406a/commit/ HTTP / 1.1 Host : localhost Content-Type : application/json Accept : application/json Content-Length : 0 Response HTTP / 1.0 200 OK Date : Mon, 17 Sep 2018 20:43:23 GMT Content-Type : application/json Allow : PUT, OPTIONS Content-Length : 5373 { \"deposit_id\" : \"ea02454e-01eb-496a-a596-680f8a62406a\" , \"items\" : [ { \"s3_head_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"s3_put_url\" : \"https://pmc-jats2pdf.s3.amazonaws.com/test/ea02454e-01eb-496a-a596-680f8a62406a/nihms973641_nihpa.nxml?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=...\" , \"item_id\" : \"7034bc8a-92e6-4266-9ba4-2aeae85a5fdf\" , \"depositor\" : \"test\" , \"item\" : \"nihms973641_nihpa.nxml\" , \"item_type\" : \"FILE\" , \"state\" : \"WAITING_FOR_UPLOAD\" , \"created\" : \"2018-09-17T16:31:30.373798-04:00\" , \"updated\" : \"2018-09-17T16:31:30.373840-04:00\" , \"result\" : false , \"item_size\" : 196676 }, {}, {}, {}, {} ], \"state\" : \"COMMITTED\" , \"created\" : \"2018-09-17T16:31:30.361948-04:00\" , \"updated\" : \"2018-09-17T16:43:23.724580-04:00\" , \"depositor\" : \"test\" , \"domain\" : \"test\" }","title":"Commit a deposit"},{"location":"2README-API-USE-EXAMPLES.html#deposit-url-items","text":"Request POST /api/deposits/ HTTP / 1.1 Host : localhost Content-Type : application/json Accept : application/json { \"action\" : \"commit\" , \"depositor\" : \"test\" , \"domain\" : \"test\" , \"items\" : [ { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641_nihpa.nxml\" , \"item_size\" : 196676 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f1.tif\" , \"item_size\" : 105600 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f2.tif\" , \"item_size\" : 167016 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f3.tif\" , \"item_size\" : 192036 }, { \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f4.tif\" , \"item_size\" : 122032 } ] } Response HTTP / 1.0 201 Created Date : Mon, 17 Sep 2018 20:39:48 GMT Content-Type : application/json Allow : GET, POST, HEAD, OPTIONS Content-Length : 1863 { \"deposit_id\" : \"0c6c7906-35f3-4f8a-9842-fa2991a1c74b\" , \"items\" : [ { \"item_id\" : \"cf2aea2f-6865-4992-9775-2b2011f25f24\" , \"depositor\" : \"test\" , \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641_nihpa.nxml\" , \"item_type\" : \"URL\" , \"state\" : \"READY_FOR_PROCESSING\" , \"created\" : \"2018-09-17T16:39:48.761646-04:00\" , \"updated\" : \"2018-09-17T16:39:48.768045-04:00\" , \"result\" : false , \"item_size\" : 196676 }, { \"item_id\" : \"f00fdd7b-13e4-4a1a-818f-fee0b9aabe0c\" , \"depositor\" : \"test\" , \"item\" : \"http://ipmc-dev11.be-md.ncbi.nlm.nih.gov/jats2pdf-data/test/nihms973641f1.tif\" , \"item_type\" : \"URL\" , \"state\" : \"READY_FOR_PROCESSING\" , \"created\" : \"2018-09-17T16:39:48.789584-04:00\" , \"updated\" : \"2018-09-17T16:39:48.796452-04:00\" , \"result\" : false , \"item_size\" : 105600 }, {}, {}, {} ], \"state\" : \"COMMITTED\" , \"created\" : \"2018-09-17T16:39:48.754281-04:00\" , \"updated\" : \"2018-09-17T16:39:48.855323-04:00\" , \"depositor\" : \"test\" , \"domain\" : \"test\" }","title":"Deposit URL items"},{"location":"3BACKOFFICE.html","text":"Back-Office \u00b6 This document is a stub for description of jats2pdf-back-office component. Attention Currently the jats2pdf-back-office component is executed once a minute for development and production sites. LINKERD_HTTP_PROXY variable \u00b6 When you execute back-office script(s) on internal NCBI servers you can specify an appropriate linkerd proxy to be used along with it. See an example of such script in bin/jats2pdf_bo_pdfbuild_dev.sh . Here is the descriptions of those proxies for bethesda-prod and bethesda-dev environments.","title":"Back-Office"},{"location":"3BACKOFFICE.html#back-office","text":"This document is a stub for description of jats2pdf-back-office component. Attention Currently the jats2pdf-back-office component is executed once a minute for development and production sites.","title":"Back-Office"},{"location":"3BACKOFFICE.html#linkerd_http_proxy-variable","text":"When you execute back-office script(s) on internal NCBI servers you can specify an appropriate linkerd proxy to be used along with it. See an example of such script in bin/jats2pdf_bo_pdfbuild_dev.sh . Here is the descriptions of those proxies for bethesda-prod and bethesda-dev environments.","title":"LINKERD_HTTP_PROXY variable"},{"location":"4CHANGELOG.html","text":"Change Log \u00b6 [0.3.1] - 2022-01-20 \u00b6 - swagger/OpenAPI interface was fixed. \u00b6 [0.3.0] - 2022-01-14 \u00b6 PMC-48254: Migration to django 3.2 [0.2.3] - 2021-05-05 \u00b6 Migration to python 3.9 [0.2.2] - 2020-06-24 \u00b6 PMC-42483: Migration to django 2.2 [0.1.20] - 2020-04-29 \u00b6 PMC-41879, APPSEC-287 were addressed. Failures of swagger pages were fixed. [0.1.18] - 2020-04-27 \u00b6 Added the same fix as in 0.1.15 for HEAD request. [0.1.16] - 2020-03-28 \u00b6 An error occurring on 2nd and subsequent try on requests, where data is streamed from file (iterable) was fixed. [0.1.15] - 2019-10-23 \u00b6 Issue with missing Cotent-Length header when compression is used by proxy was fixed by preventing compression. [0.1.14] - 2019-10-11 \u00b6 The issue with compressed content, when Content-Length returned is smaller then declared item_size was corrected. [0.1.13] - 2019-10-09 \u00b6 PMC-39947 handling of URLs with no filename in it was changed. If the file name is not provided, it has to be provided in Content-Disposition header then. [0.1.12] - 2019-09-25 \u00b6 PMC-39503: the problem with updating details property more than once, when something already failed on back-office side was fixed. Migration to python 3.7 and Django 2.1 was made. [0.1.11] - 2019-08-07 \u00b6 PMC-39384: support for downloading from various NCBI environments via http proxy (using linkerd URLs) was added. [0.1.10] - 2019-04-30 \u00b6 The limit size of individual item was increased from 20MiB to 26MiB per PI-677. [0.1.9] - 2019-04-29 \u00b6 The limit size of individual item was increased from 10MiB to 20MiB. The limit size of resulting PDF was increased from 50MiB to 100MiB. [0.1.8] - 2018-11-27 \u00b6 the limit of 2000 characters on details property was lifted. HTTP retries were added for back-office script. [0.1.7] - 2018-11-09 \u00b6 the limits on individual items were changed. The regular item size limit was set as 10Mib and result item size limit is 50Mib. [0.1.6] - 2018-10-19 \u00b6 improvement: support for linkerd proxy (NCBI internal infrastructure) was implemented. [0.1.5] - 2018-10-15 \u00b6 bugfix: handling of Content-Disposition HTTP header. bugfix: compromise with item_size validation at HTTP HEAD request only. [0.1.4] - 2018-10-03 \u00b6 bugfix: The input xml file extension was expected to be an .nxml (by pdfbuild tool) until this release. Now you can supply it with any extension, it will be renamed to satisfy pdfbuild utility. [0.1.3] - 2018-09-20 \u00b6 improvement: support of the following formats was added: .tar, .bz2, .tar.bz2, .tgz, .zip, .7z, .tar.Z, .rar [0.1.1] - 2018-09-18 \u00b6 Initial release","title":"Change Log"},{"location":"4CHANGELOG.html#change-log","text":"","title":"Change Log"},{"location":"4CHANGELOG.html#031-2022-01-20","text":"","title":"[0.3.1] - 2022-01-20"},{"location":"4CHANGELOG.html#-swaggeropenapi-interface-was-fixed","text":"","title":"- swagger/OpenAPI interface was fixed."},{"location":"4CHANGELOG.html#030-2022-01-14","text":"PMC-48254: Migration to django 3.2","title":"[0.3.0] - 2022-01-14"},{"location":"4CHANGELOG.html#023-2021-05-05","text":"Migration to python 3.9","title":"[0.2.3] - 2021-05-05"},{"location":"4CHANGELOG.html#022-2020-06-24","text":"PMC-42483: Migration to django 2.2","title":"[0.2.2] - 2020-06-24"},{"location":"4CHANGELOG.html#0120-2020-04-29","text":"PMC-41879, APPSEC-287 were addressed. Failures of swagger pages were fixed.","title":"[0.1.20] - 2020-04-29"},{"location":"4CHANGELOG.html#0118-2020-04-27","text":"Added the same fix as in 0.1.15 for HEAD request.","title":"[0.1.18] - 2020-04-27"},{"location":"4CHANGELOG.html#0116-2020-03-28","text":"An error occurring on 2nd and subsequent try on requests, where data is streamed from file (iterable) was fixed.","title":"[0.1.16] - 2020-03-28"},{"location":"4CHANGELOG.html#0115-2019-10-23","text":"Issue with missing Cotent-Length header when compression is used by proxy was fixed by preventing compression.","title":"[0.1.15] - 2019-10-23"},{"location":"4CHANGELOG.html#0114-2019-10-11","text":"The issue with compressed content, when Content-Length returned is smaller then declared item_size was corrected.","title":"[0.1.14] - 2019-10-11"},{"location":"4CHANGELOG.html#0113-2019-10-09","text":"PMC-39947 handling of URLs with no filename in it was changed. If the file name is not provided, it has to be provided in Content-Disposition header then.","title":"[0.1.13] - 2019-10-09"},{"location":"4CHANGELOG.html#0112-2019-09-25","text":"PMC-39503: the problem with updating details property more than once, when something already failed on back-office side was fixed. Migration to python 3.7 and Django 2.1 was made.","title":"[0.1.12] - 2019-09-25"},{"location":"4CHANGELOG.html#0111-2019-08-07","text":"PMC-39384: support for downloading from various NCBI environments via http proxy (using linkerd URLs) was added.","title":"[0.1.11] - 2019-08-07"},{"location":"4CHANGELOG.html#0110-2019-04-30","text":"The limit size of individual item was increased from 20MiB to 26MiB per PI-677.","title":"[0.1.10] - 2019-04-30"},{"location":"4CHANGELOG.html#019-2019-04-29","text":"The limit size of individual item was increased from 10MiB to 20MiB. The limit size of resulting PDF was increased from 50MiB to 100MiB.","title":"[0.1.9] - 2019-04-29"},{"location":"4CHANGELOG.html#018-2018-11-27","text":"the limit of 2000 characters on details property was lifted. HTTP retries were added for back-office script.","title":"[0.1.8] - 2018-11-27"},{"location":"4CHANGELOG.html#017-2018-11-09","text":"the limits on individual items were changed. The regular item size limit was set as 10Mib and result item size limit is 50Mib.","title":"[0.1.7] - 2018-11-09"},{"location":"4CHANGELOG.html#016-2018-10-19","text":"improvement: support for linkerd proxy (NCBI internal infrastructure) was implemented.","title":"[0.1.6] - 2018-10-19"},{"location":"4CHANGELOG.html#015-2018-10-15","text":"bugfix: handling of Content-Disposition HTTP header. bugfix: compromise with item_size validation at HTTP HEAD request only.","title":"[0.1.5] - 2018-10-15"},{"location":"4CHANGELOG.html#014-2018-10-03","text":"bugfix: The input xml file extension was expected to be an .nxml (by pdfbuild tool) until this release. Now you can supply it with any extension, it will be renamed to satisfy pdfbuild utility.","title":"[0.1.4] - 2018-10-03"},{"location":"4CHANGELOG.html#013-2018-09-20","text":"improvement: support of the following formats was added: .tar, .bz2, .tar.bz2, .tgz, .zip, .7z, .tar.Z, .rar","title":"[0.1.3] - 2018-09-20"},{"location":"4CHANGELOG.html#011-2018-09-18","text":"Initial release","title":"[0.1.1] - 2018-09-18"}]}